.TH TODO 1
.SH NAME
todo \- print next tasks
.SH SYNOPSIS
.B todo
.RB [ \-dl ]
.RB [ \-t
.RI [[ yyyy -] mm -] dd ]
.IR file ...
.SH DESCRIPTION
.B todo
reads files for tasks, one task per line;
and writes to the standard output those tasks that should be done,
and that are not blocked by other undone tasks.
The tasks are ordered in decreasing order of urgency
(the most urgent task is the first listed).
If a hyphen (-) is provided as argument or the argument is absent,
.B todo
reads from the standard input.
The options are as follows:
.TP
.B \-d
Consider tasks whose deadline has already passed as done,
even if they are not explicitly set as done.
.TP
.B \-l
Long format.
Display tasks with priority and deadline.
.TP
\fB-T\fR [[\fIyyyy\fR-]\fImm\fR-]dd
Act like the specified value is the specified date instead of using the current date.
.PP
A task has the following syntax:
.IP
.EX
[STATUS] NAME: [PRIORITY] DESCRIPTION [PROPERTY:VALUE]...
.EE
.PP
Each task begins with an optional status.
Two status are possible:
.I TODO
(which defines a uncompleted task)
or
.I DONE
(which defines a completed task).
If no status is supplied, it is considered as
.IR TODO .
.PP
After the status comes the obligatory task name.
The task name is a single alphanumeric word without spaces that names the task.
The task name must be followed by a colon.
.PP
After the task name comes the optional priority.
The priority is a single uppercase letter between parentheses.
The letter must be A, B or C.
The lower the letter, the higher the priority;
so \(lqA\(rq is the higher priority.
.PP
Then, comes the obligatory task description.
The task description spans to the beginning of the first property.
.PP
After the task description comes the properties.
Properties are a space-delimited list of name-value pairs separated by colon.
The following property names and their respective values are listed below.
.TP
.B due
A property of the form
.I due:YYYY-MM-DD
specifies the deadline of the task.
.TP
.B deps
A property of the form
.I deps:dep1,dep2,â€¦,depN
specifies a comma-delimited list of tasks that this task depends on.
.PP
If a task line ends in a backslash (\e), the task continues in the next line.
If a line does not match the format of a task specification, that line is ignored
and a warning is printed to stderr.
.SH EXAMPLES
Consider the following input.
.IP
.EX
DONE project: (B) Initial project for todo(1).
TODO manual:  (C) Write manual for todo(1).              due:2021-09-03
TODO usage:   (B) Think in a interface for todo(1)
TODO data:    (A) Implement data structures for tasks.   deps:project
TODO parser:  (B) Write code for parsing tasks.          deps:data
TODO algor:   (A) Implement algorithm for sorting tasks. deps:parser
TODO todo:    (B) Write the todo(1) utility.             deps:parser,algor
TODO release: (C) Release todo(1).                       deps:todo,manual
.EE
.PP
If today were 01 September 2021,
then running calendar with the option -l on this input would print the following:
.IP
.EX
(C) Write manual for todo(1). due:2021-09-03
(A) Implement data structures for tasks.
(B) Think in a interface for todo(1)
.EE
.PP
Note that, although the \(lqmanual\(rq task has low priority (C),
it is listed first because its deadline is near and has a task that depends on it.
.SH SEE ALSO
.IR calendar (1),
.IR schedule (1)
